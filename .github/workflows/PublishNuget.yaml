name: 'Publish Nuget'

on:
  workflow_run:
    workflows: ['Build']
    types: [completed]
    branches: ["main"]

permissions:
  contents: read
  actions: read
  pull-requests: read
  checks: read

defaults:
  run:
    shell: powershell
  
env:
  buildArtifactsPath: ${{ github.workspace }}/.artifacts
  packageOutputPath: ${{ github.workspace }}/out

jobs:
  Publish:
    if: github.event.workflow_run.conclusion == 'success'
    runs-on: [ windows-latest ]
    name: Publish Nuget
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Download Build Output
        uses: actions/github-script@v6
        with:
          script: |
            const downloadArtifact = async (artifact) => {
                let fs = require('fs');
                const artifactsDirectory = `${process.env.artifactsPath}`;
                fs.mkdirSync(artifactsDirectory);
                const archivePath = `${artifactsDirectory}/${artifact.name}.zip`;
                console.log(`Download artifact to path: ${archivePath}`);
                let download = await github.rest.actions.downloadArtifact({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    artifact_id: artifact.id,
                    archive_format: 'zip'
                });
                
                fs.writeFileSync(archivePath, Buffer.from(download.data));
            };

            const run_id = Number('${{ github.event.workflow_run.id }}');
            var all_artifacts = await github.rest.actions.listWorkflowRunArtifacts({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: run_id,
            });

            /*all_artifacts = artifacts.data.artifacts.filter((artifact) => {
              return artifact.name.includes('Apps-');
            });*/

            console.log(`Found ${all_artifacts.data.total_count} artifacts`);

            for (const artifact of all_artifacts.data.artifacts) {
                await downloadArtifact(artifact);
            }
            
      - name: Unzip Build Output
        run: | 
          Get-ChildItem -Path "$($env:buildArtifactsPath)/*zip" | ForEach-Object {
            Write-Host "Expand archive: $($_.FullName)"
            Expand-Archive -DestinationPath $env:buildArtifactsPath -Path $_.FullName -Verbose
            Remove-Item -Path $_.FullName -Force
          }

